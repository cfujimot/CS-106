/**
 * @author maddierook
 *
 */

//imports Scanner and FileReader ability
import java.util.*;
import java.io.*;


public class FileManipulator {

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) throws FileNotFoundException {
		Scanner fileReader = new Scanner (new File("src/input.txt"));

		String accountType = new String();
		String transactionType = new String();
		double checking = 0;
		double savings = 0; 
		double creditCard = 0;
				
		while (fileReader.hasNextLine()) {
			processLine(fileReader.nextLine(), accountType, transactionType, checking, savings, creditCard);
			//fileReader.nextLine();
		}
		
		fileReader.close();
		
		//calls the print method when all line processing is done
		printBalance(checking, savings, creditCard);
	}
		
	
	/**
	 * 
	 * @param line
	 */
	public static void processLine(String line, String accountType, String transactionType, double checking, double savings, double creditCard) {
		Scanner lineProcessor = new Scanner(line);
		
		//skip the first column of dates
		lineProcessor.next();
		
		accountType = lineProcessor.next();

		//while (lineProcessor.hasNext()) {
			//read in the account type and choose appropriate method	
			if (accountType.equals("Checking")) {
				processChecking(line, transactionType, checking, savings, creditCard);
			} else if (accountType.equals("Savings")) {
				processSavings(line, transactionType, checking, savings, creditCard);
			} else if (accountType.equals("Credit")) {
				processCredit(line, transactionType, checking, savings, creditCard);
			}
		//}
		
		lineProcessor.close();
	
	}
			
	/**
	 * 	
	 * @param line
	 * @param checking
	 * @param savings
	 * @param creditCard
	 * @return
	 */
	public static double processChecking(String line, String transactionType, double checking, double savings, double creditCard) {				
		Scanner checkingProcessor = new Scanner(line);
		
		//skip the first column of dates, and the second of account type
		checkingProcessor.next();
		checkingProcessor.next();
		
		transactionType = checkingProcessor.next();
		
		//skip to the transaction value
		checkingProcessor.next();
		
		if (transactionType.equals("Opening")) {
			checking += checkingProcessor.nextDouble();	
		} else if (transactionType.equals("Withdrawal")) {
			checking -= checkingProcessor.nextDouble();
		} else if (transactionType.equals("Deposit")) {
			checking += checkingProcessor.nextDouble();
		}
		
		checkingProcessor.close();
				
		return checking;
		
	}
			
	/**
	 * 
	 * @param line
	 * @param checking
	 * @param savings
	 * @param creditCard
	 * @return
	 */
	public static double processSavings(String line, String transactionType, double checking, double savings, double creditCard) {
		Scanner savingsProcessor = new Scanner(line);
				
		//skip the first column of dates, and the second of account type
		savingsProcessor.next();
		savingsProcessor.next();
				
		transactionType = savingsProcessor.next();

		//skip to the transaction value
		savingsProcessor.next();
				
			if (transactionType.equals("Opening")) {
				savings += savingsProcessor.nextDouble();	
			} else if (transactionType.equals("Withdrawal")) {
				savings -= savingsProcessor.nextDouble();
			} else if (transactionType.equals("Deposit")) {
				savings += savingsProcessor.nextDouble();
			}
		
			savingsProcessor.close();

		return savings;
		
	}
	
	/**
	 * 
	 * @param line
	 * @param checking
	 * @param savings
	 * @param creditCard
	 * @return
	 */
	public static double processCredit(String line, String transactionType, double checking, double savings, double creditCard) {
		Scanner creditProcessor = new Scanner(line);
		
		//skip the first column of dates, and the second of account type
		creditProcessor.next();
		creditProcessor.next();
				
		transactionType = creditProcessor.next();
		
		//skip to the transaction value
		creditProcessor.next();
				
		if (transactionType.equals("Opening")) {
			System.out.println("credit");
			creditCard += creditProcessor.nextDouble();	
		} else if (transactionType.equals("Withdrawal")) {
			creditCard -= creditProcessor.nextDouble();
		} else if (transactionType.equals("Deposit")) {
			creditCard += creditProcessor.nextDouble();
		}
	
		creditProcessor.close();

		return creditCard;
	
	}
		
	
	/**
	 * 
	 * @param checking
	 * @param savings
	 * @param creditCard
	 */
	public static void printBalance(double checking, double savings, double creditCard) {
		System.out.println("Checking Account Balance = " + checking + ".");
		System.out.println("Savings Account Balance = " + savings + ".");
		System.out.println("Credit Card Balance = " + creditCard + ".");
	
		/*PrintStream output = new PrintStream (new File("src/output.txt"));
		output.close(); */
	}
	
}
