import java.io.*;
import java.util.*;

/**
 * 
 */

/**
 * @author maddierook
 *
 */
public class TarotDeck {

	public String number;
	public String name;
	public String mtgName;
	public String flavor;
	public String meaning;
	private Stack<MajorArcana> cards1;
	private Stack<MajorArcana> cards2;
	private boolean alignment;

	/**
	 * 
	 * @throws FileNotFoundException
	 */
	public void load() throws FileNotFoundException { 
		//begin building 1st deck from upright file
		Scanner fileReader1 = new Scanner (new File("src/mtg upright major arcana.txt"));
		cards1 = new Stack<MajorArcana>();
		fileReader1.nextLine(); //skips the first line of identifiers in the text file

		//read in MajorArcana properties and build the upright deck
		while (fileReader1.hasNextLine()) {
			String line[] = fileReader1.nextLine().split("\\t");
			
			number = line[0];
			name = line[1];
			mtgName = line[2];
			flavor = line[3];
			meaning = line[4];
				
			cards1.add(new MajorArcana(number, name, mtgName, flavor, meaning));
		}
		fileReader1.close();
		
		//begin building 2nd deck from reversed file
		Scanner fileReader2 = new Scanner (new File("src/mtg reversed major arcana.txt"));
		cards2 = new Stack<MajorArcana>();
		fileReader2.nextLine(); //skips the first line of identifiers in the text file
		
		//read in MajorArcana properties and build the reversed deck
		while (fileReader2.hasNextLine()) {
			String line[] = fileReader2.nextLine().split("\\t");
					
			number = line[0];
			name = line[1];
			mtgName = line[2];
			flavor = line[3];
			meaning = line[4];
						
			cards2.add(new MajorArcana(number, name, mtgName, flavor, meaning));
		}
		fileReader2.close();
	
		//shuffle both decks
		Collections.shuffle(cards1);
		Collections.shuffle(cards2);

	}

	/**
	 * A method to perform a single card reading
	 */
	public void single() {
		
		//print ascii of the spread
		System.out.println();
		System.out.println(" _______");
		System.out.println("|       |");
		System.out.println("|       |");
		System.out.println("|   1   |");
		System.out.println("|       |");
		System.out.println("|       |");
		System.out.println(" -------");
		System.out.println();
		
		Queue<MajorArcana> singleHand = new LinkedList<MajorArcana>();

		//pick the upright or reversed deck
		if (Math.random() < 0.5) {
			alignment = true;
		} else {
			alignment = false;
		}
				
		if (alignment = true) {
			singleHand.add(cards1.pop());
			cards2.pop();			
		} else if (alignment = false) {
			singleHand.add(cards2.pop());
			cards1.pop();
		}
	
	}

	
	/**
	 * A method to perform a past, present, future reading
	 */
	public void triple() {
		//print ascii of the spread
				System.out.println();
				System.out.println(" _______    _______    _______");
				System.out.println("|       |  |       |  |       |");
				System.out.println("|       |  |       |  |       |");
				System.out.println("|   1   |  |   2   |  |   3   |");
				System.out.println("|       |  |       |  |       |");
				System.out.println("|       |  |       |  |       |");
				System.out.println(" -------    -------    -------");
				System.out.println("   Past     Present    Future");
				System.out.println();
				
	}
	
	/**
	 * A method to perform a pentagram reading
	 */
	public void pentagram() {
		//TODO remove five cards in order from the HashSet
		//TODO print ascii of the spread **this will be difficult
	}
	
	/**
	 * A method to perform a days-of-the-week reading
	 */
	public void week() {
		//TODO remove seven cards in order from the HashSet
		//TODO print ascii of the spread **this will be very difficult
		
	}

}
