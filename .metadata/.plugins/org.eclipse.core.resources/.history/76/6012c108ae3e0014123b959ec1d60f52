/**
 * 
 */

/**
 * @author maddierook
 *
 */

import java.util.*;

public class Accuracy_Precision_Calculator {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//program functionality
		System.out.println("This program calculates the accuracy and precision of a P-20 micropipette, using the literature density of water.");
		System.out.println();
		
		//request calculated average density of water
		Scanner consoleAverage = new Scanner(System.in);
		System.out.print("What is the calculated average?: ");
		double calculatedAverage = consoleAverage.nextDouble();
		
		/* calcualtedAverage = 1.063 */
		
		//accuracy method
		accuracy(calculatedAverage);
		
		//request variables for standard error of the mean
		Scanner consoleNumberOfTrials = new Scanner(System.in);
		System.out.println("What is the number of trials?");
		int numberOfTrials = consoleNumberOfTrials.nextInt();
		
		//TODO How to request input based on the number of trials?
		Scanner consoleTrialValues = new Scanner(System.in);
		System.out.println("What is the value of each trial?");
		double x1 = consoleTrialValues.nextDouble();
		double x2 = consoleTrialValues.nextDouble();
		double x3 = consoleTrialValues.nextDouble();
		double x4 = consoleTrialValues.nextDouble();
		double x5 = consoleTrialValues.nextDouble();
		double x6 = consoleTrialValues.nextDouble();
		double x7 = consoleTrialValues.nextDouble();
		double x8 = consoleTrialValues.nextDouble();
		double x9 = consoleTrialValues.nextDouble();
		
		/*x1 = 1.300;
		x2 = 1.200;
		x3 = 1.100;
		x4 = 0.980;
		x5 = 1.010;
		x6 = 0.950;
		x7 = 1.045;
		x8 = 0.990;
		x9 = 0.990; */
		
		//precision methods
		precisionSEM(calculatedAverage);
		precisionRAD(calculatedAverage);
		
	}
	
	public static void accuracy(double calculatedAverage) {
		//calculates percent error, as a measure of accuracy
		
		// define PercentError-specific variables
		double exactValue;
		double percentError;
		
		//calculate percent error for density of water
		exactValue = 1.00;
		percentError = ((Math.abs(calculatedAverage - exactValue) / exactValue) * 100);
		
		//output percent error
		System.out.println();
		System.out.println("Accuracy, via Percent Error:");
		System.out.println("For a Mean calculated density of " + calculatedAverage + " grams per milliliter,");
		System.out.println("and a literature value of " + exactValue + " grams per milliliter,");
		System.out.println("the Percent Error is " + percentError + "%.");
		System.out.println();
	}	
		
	public static void precisionSEM(double calculatedAverage) {
		//calculates standard error of the mean, as a measure of precision
		
		//define SEM-specific variables
		double sumOfSquares;
		double standardDeviation;
		double standardError;
				
		//calculate sum of squares
		sumOfSquares = ((x1 - calculatedAverage)*(x1 - calculatedAverage) + (x2 - calculatedAverage)*(x2 - calculatedAverage) + (x3 - calculatedAverage)*(x3 - calculatedAverage) + (x4 - calculatedAverage)*(x4 - calculatedAverage) + (x5 - calculatedAverage)*(x5 - calculatedAverage) + (x6 - calculatedAverage)*(x6 - calculatedAverage) + (x7 - calculatedAverage)*(x7 - calculatedAverage) + (x8 - calculatedAverage)*(x8 - calculatedAverage) + (x9 - calculatedAverage)*(x9 - calculatedAverage));

		//calculate standard error of the mean for density of water
		standardDeviation = (Math.sqrt(sumOfSquares / (numberOfTrials - 1) ));
		standardError = (standardDeviation / Math.sqrt(numberOfTrials));
				
		//output standard error of the mean
		System.out.println("Precision, via Standard Error of the Mean:");
		System.out.println("For a Mean calculated density of " + calculatedAverage + " grams per milliliter,");
		System.out.println("the Standard Deviation of the 9 defined trials is " + standardDeviation + ", ");
		System.out.println("and the Standard Error of the Mean is Â±" + standardError + ".");
	}

	public static void precisionRAD(double calculatedAverage) {
		//calculates percent relative average deviation, as a measure of precision
		
		//define RAD-specific variables
		double averageDeviations;
		double relativeAverageDeviation;
		
		//calculate average deviations
		averageDeviations = Math.abs(calculatedAverage - x1)
		
		
		//calculate percent RAD
		relativeAverageDeviation = (averageDeviations / calculatedAverage) * 100;
		
	}
}
